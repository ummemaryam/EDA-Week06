# -*- coding: utf-8 -*-
"""EDA_Week06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YiiOtOVLQ0ZFqCts9g5G3PQ8-jVk9yS5
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
# Load the dataset
df = pd.read_csv('/content/births.csv')
# Display the first few rows of the dataframe
print(df.head())

# Add a new column "Decade"
df['Decade'] = (df['year'] // 10) * 10

print(df.head())

# Descriptive statistics
description = df.describe()
print(description)

# Check for missing values
missing_values = df.isnull().sum()
print("Missing Values:\n", missing_values)

# Trend of male & female births every decade
trend = df.groupby(['Decade', 'gender'])['births'].sum().unstack()
print(trend)

# Plot the trend
trend.plot(kind='bar', stacked=True)
plt.xlabel('Decade')
plt.ylabel('Number of Births')
plt.title('Trend of Male & Female Births Every Decade')
plt.show()

# Remove outliers
mean = df['births'].mean()
std = df['births'].std()
df = df[(df['births'] >= mean - 5*std) & (df['births'] <= mean + 5*std)]

# Grouping data to get total births per weekday per decade
births_by_day_decade = df.groupby(['day', 'Decade'])['births'].sum().reset_index()

# Sorting the weekdays
births_by_day_decade['day'] = pd.Categorical(births_by_day_decade['day'], categories=np.arange(0, 7), ordered=True)

# Plotting
plt.figure(figsize=(12, 6))
sns.barplot(x='day', y='births', hue='Decade', data=births_by_day_decade)
plt.xlabel('Day of Week (0=Sunday)')
plt.ylabel('Number of Births')
plt.title('Births by Weekday for Several Decades')
plt.legend(title='Decade', loc='upper right')
plt.xticks(np.arange(7), ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])
plt.show()

# Group the data by month and day
births_by_month = df.groupby('month')['births'].sum()
births_by_day = df.groupby('day')['births'].sum()

print("Births by Month:\n", births_by_month)
print("\nBirths by Day:\n", births_by_day)

# Group the data by month and day, calculate the average births
average_births_by_date = df.groupby(['month', 'day'])['births'].mean()

# Plot
plt.figure(figsize=(15, 6))
average_births_by_date.plot(label='Births')
plt.xlabel('Months')
plt.ylabel('Average Number of Births')
plt.title('Average Births by Date of the Year')
plt.legend(title='Legend', loc='upper right')
plt.show()